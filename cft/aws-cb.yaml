Parameters:
  PrismaCloudAccessKeyID:
    Type: String
    Description: Access Key ID from Prisma Cloud ServiceRole
    NoEcho: True
  PrismaCloudSecretKey:
    Type: String
    Description: Secret Key from Prisma Cloud ServiceRole
    NoEcho: True
  PrismaCloudComputeURL:
    Type: String
    Description: URL from Compute e.g https://us-east1.cloud.twistlock.com/us-2-xxxxxxx
    Default: "https://us-east1.cloud.twistlock.com/us-2-158256885"
  PrismaCloudAPIURL:
    Type: String
    Description: URL from API e.g https://api.prismacloud.io
    Default: "https://api2.prismacloud.io"
  GitHubUrl:
    Type: String
    Description: URL for GitHub repo i.e. https://github.com/username/repository
    Default: "https://github.com/chanduusc/prisma-codebuild-demo"
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/bionic/stable/current/amd64/hvm/ebs-gp2/ami-id'

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['-', [ 'cnappdemo',!Ref 'AWS::AccountId']]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false  
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
  AccessKeyParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Access Key ID 
      Name: tl_user
      Type: String
      Value: !Ref PrismaCloudAccessKeyID
  SecretKeyParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Secret Key
      Name: tl_pass
      Type: String
      Value: !Ref PrismaCloudSecretKey
  ComputeURLParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Compute URL
      Name: compute_url
      Type: String
      Value: !Ref PrismaCloudComputeURL
  APIConsoleURLParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Console URL
      Name: api_console_url
      Type: String
      Value: !Ref PrismaCloudAPIURL
  CodeSecurityCredentialsParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: Code Security Credentials
      Name: bc-api-key
      Type: String
      Value: !Join [ '::', [!Ref PrismaCloudAccessKeyID, !Ref PrismaCloudSecretKey] ]
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                  Service:
                    - codebuild.amazonaws.com
              Action:
                - sts:AssumeRole
      Description: !Sub "IAM Role for ${AWS::StackName}"
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - codebuild:*
                  - logs:*
                  - SSM:*
                  - ecr:*
                  - eks:*
                Resource: '*'
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:  !Join ['-', [ 'CodeBuild', !Ref 'AWS::AccountId']]
      Description: CodeBuild with GitHub
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: PRISMA_API_URL
            Value: !Ref PrismaCloudAPIURL
            Type: PLAINTEXT
          - Name: ECR_REPO_PATH
            Value: !Join ['', [ !Ref 'AWS::AccountId', '.dkr.ecr.', !Ref 'AWS::Region', '.amazonaws.com/', 'prisma-ecr']]
            Type: PLAINTEXT
          - Name: ECR_REGISTRY 
            Value: !Join ['', [ !Ref 'AWS::AccountId', '.dkr.ecr.', !Ref 'AWS::Region', '.amazonaws.com']]
            Type: PLAINTEXT

      Source:
        Type: GITHUB
        Location: !Ref GitHubUrl
      TimeoutInMinutes: 10
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${CodeBuild}"
      RetentionInDays: 7
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: wrapper-vpc
  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: MyVPC
      Tags:
        - Key: Name
          Value: wrapper-subnet1
  MySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: MyVPC
      Tags:
        - Key: Name
          Value: wrapper-subnet2
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: wrapper-internet-gateway
  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: MyInternetGateway
      VpcId:
        Ref: MyVPC
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPC
      Tags:
        - Key: Name
          Value: wrapper-route-table
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyVPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyInternetGateway
  MySubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyRouteTable
      SubnetId:
        Ref: MySubnet1
  MySubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyRouteTable
      SubnetId:
        Ref: MySubnet2
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic to EKS worker nodes
      VpcId:
        Ref: MyVPC
      Tags:
        - Key: Name
          Value: wrapper-security-group
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  MyEC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: "MyEC2RolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                  - "cloudformation:*"
                  - "ec2:*"
                  - "eks:*"
                  - "ecr:*"
                Resource: "*"
  MyEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: wrapper-ec2-instance-profile
      Path: /
      Roles: 
       - !Ref MyEC2IAMRole
  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !Ref LatestAmiId
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      SubnetId: !Ref MySubnet1
      IamInstanceProfile: !Ref MyEC2InstanceProfile
      InstanceType: t2.large
      SecurityGroupIds: 
        - !Ref MySecurityGroup
      UserData:
        Fn::Base64: |
            #!/bin/bash -ex
            wget https://raw.githubusercontent.com/chanduusc/prisma-codebuild-demo/main/aws-nodel.sh
            chmod a+x aws-nodel.sh
            ./aws-nodel.sh


Outputs:
  ProjectName:
    Value: !Ref CodeBuild
    Description: CodeBuild project name